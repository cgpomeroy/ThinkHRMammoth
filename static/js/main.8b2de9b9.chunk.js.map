{"version":3,"sources":["components/SearchBar/SearchBar.js","components/ResultsAndPagination/ResultsAndPagination.js","components/VideoListings/IndividualVideoResult.js","components/VideoListings/VideoListings.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","useState","searchQuery","setSearchQuery","query","submitQuery","e","preventDefault","setLoadingResults","setError","fetch","then","res","json","setVideoList","items","setFirstSearch","catch","className","style","flexDirection","padding","onSubmit","width","border","height","borderRadius","onClick","onChange","target","value","placeholder","outline","val","backgroundColor","color","marginLeft","type","ResultsAndPagintation","display","justifyContent","results","IndividualVideoResult","flexWrap","margin","flex","fontWeight","image","alt","title","src","maxHeight","minHeight","textAlign","fontSize","overflow","paddingTop","description","alignItems","href","kind","indexOf","linkId","d","day","getDate","month","getMonth","year","getFullYear","toUpperCase","formatDate","Date","date","channelTitle","VideoListings","videoList","length","map","i","key","id","snippet","thumbnails","high","url","channelId","videoId","publishedAt","App","firstSearch","loadingSearchResults","error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.8b2de9b9.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FiSearch } from \"react-icons/fi\";\r\n\r\n/**\r\n * SearchBar.js provides the UI for user searches as well as the functionality\r\n * for updating state related to the call to the YouTube API.\r\n *\r\n * When the user clicks either the search icon or button, the\r\n * search query is built (27) and the call is made to the YouTube API (29-44).\r\n *\r\n * As part of submitting the query, the parent's state is updated.\r\n *  - Loading is set to true (31).\r\n *  - Any previous errors are cleared (32).\r\n *\r\n * If the call is successful, the parent's state is updated.\r\n *  - Loading is set to false(38).\r\n *  - The \"FirstSearch\" indicator is set to false(37).\r\n *  - The VideoList is populated with the search results(36).\r\n *\r\n * If the call is unsuccessful, the parent's state is udpated.\r\n *  - Loading is set to false(41).\r\n *  - The \"Error\" indicator is set to true, displaying a generic failure message(42).\r\n */\r\n\r\nexport function SearchBar(props) {\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const query = `https://www.googleapis.com/youtube/v3/search?part=snippet&maxResults=5&q=${searchQuery}&key=AIzaSyBbic_3q36LIzd1DK-X6Ghn3-rApxOX1pI`;\r\n\r\n  const submitQuery = e => {\r\n    e.preventDefault();\r\n    props.setLoadingResults(true);\r\n    props.setError(false);\r\n    fetch(query)\r\n      .then(res => res.json())\r\n      .then(res => {\r\n        props.setVideoList(res.items);\r\n        props.setFirstSearch(false);\r\n        props.setLoadingResults(false);\r\n      })\r\n      .catch(() => {\r\n        props.setLoadingResults(false);\r\n        props.setError(true);\r\n      });\r\n  };\r\n  return (\r\n    <div\r\n      className=\"searchBar center-flex\"\r\n      style={{\r\n        flexDirection: \"row\",\r\n        padding: \"1em\"\r\n      }}\r\n    >\r\n      <form onSubmit={e => submitQuery(e)} style={{ width: \"100%\" }}>\r\n        <div className=\"center-flex\">\r\n          <div\r\n            className=\"center-flex\"\r\n            style={{\r\n              border: \"1px black solid\",\r\n              height: \"37px\",\r\n              borderRadius: \"3px\"\r\n            }}\r\n          >\r\n            <FiSearch\r\n              style={{ padding: \"0 1em\" }}\r\n              onClick={e => submitQuery(e)}\r\n            />\r\n            <input\r\n              onChange={e => setSearchQuery(e.target.value)}\r\n              placeholder=\"Enter your search here...\"\r\n              style={{\r\n                border: \"none\",\r\n                outline: \"none\",\r\n                height: \"80%\",\r\n                width: \"240px\"\r\n              }}\r\n              val={searchQuery}\r\n            />\r\n          </div>\r\n          <button\r\n            style={{\r\n              height: \"40px\",\r\n              width: \"120px\",\r\n              backgroundColor: \"black\",\r\n              color: \"white\",\r\n              border: \"none\",\r\n              borderRadius: 3,\r\n              marginLeft: -5\r\n            }}\r\n            type=\"submit\"\r\n          >\r\n            Submit\r\n          </button>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { FaChevronLeft, FaChevronRight } from \"react-icons/fa\";\r\n\r\nexport function ResultsAndPagintation(props) {\r\n  return (\r\n    <div\r\n      className=\"resultsAndPagination\"\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        padding: \"0 1em\"\r\n      }}\r\n    >\r\n      <div>Total results: {props.results}</div>\r\n      <div>\r\n        <FaChevronLeft />\r\n        {props.results > 0 ? `1/${props.results / 5}` : \"0/0\"}\r\n        <FaChevronRight />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\n/**\r\n * IndividualVideoResult.js is used to render individual video results.\r\n *\r\n * The component contains two functions for\r\n * - Formatting dates (12-33)\r\n * - Changing links based on whether the result is a video or a channel (34-40)\r\n */\r\n\r\nexport default function IndividualVideoResult(props) {\r\n  function formatDate(d) {\r\n    const months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\"\r\n    ];\r\n\r\n    const day = d.getDate();\r\n    const month = months[d.getMonth()];\r\n    const year = d.getFullYear();\r\n\r\n    return `${day} ${month} ${year}`.toUpperCase();\r\n  }\r\n  function buildLink(kind) {\r\n    const isVideo = kind.indexOf(\"#video\") > -1;\r\n    if (isVideo) {\r\n      return `https://www.youtube.com/watch?v=${props.linkId}`;\r\n    } else {\r\n      return `https://www.youtube.com/channel/${props.linkId}`;\r\n    }\r\n  }\r\n  return (\r\n    <div\r\n      className=\"videoListing\"\r\n      style={{\r\n        display: \"flex\",\r\n        flexWrap: \"wrap\",\r\n        border: \"1px black solid\",\r\n        margin: \".75em 0\",\r\n        padding: \"1em\"\r\n      }}\r\n    >\r\n      <div\r\n        className=\"flex-center\"\r\n        style={{\r\n          flex: 2,\r\n          fontWeight: \"bold\"\r\n        }}\r\n      >\r\n        {props.image ? (\r\n          <div>\r\n            <img\r\n              alt={`${props.title} thumbnail`}\r\n              src={props.image}\r\n              style={{ maxHeight: \"20vh\", height: \"100%\", minHeight: \"200px\" }}\r\n            />\r\n          </div>\r\n        ) : (\r\n          \"No preview available\"\r\n        )}\r\n      </div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          height: \"100%\",\r\n          flex: 3,\r\n          padding: \"0 1em\",\r\n          textAlign: \"left\"\r\n        }}\r\n      >\r\n        <div\r\n          style={{\r\n            flex: 2\r\n          }}\r\n        >\r\n          <h3\r\n            style={{\r\n              margin: 0,\r\n              fontSize: \"1.5em\"\r\n            }}\r\n          >\r\n            {props.title || \"No Title\"}\r\n          </h3>\r\n        </div>\r\n        <div\r\n          style={{\r\n            flex: 3,\r\n            overflow: \"hidden\",\r\n            minHeight: \"30%\",\r\n            paddingTop: \"1em\"\r\n          }}\r\n        >\r\n          {props.description || \"No Description\"}\r\n        </div>\r\n        <div\r\n          style={{\r\n            flex: 3,\r\n            justifyContent: \"middle\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            paddingTop: \"1em\"\r\n          }}\r\n        >\r\n          <div>\r\n            <a href={buildLink(props.kind) || \"\"}>\r\n              <button\r\n                style={{\r\n                  height: \"40px\",\r\n                  width: \"120px\",\r\n                  backgroundColor: \"black\",\r\n                  color: \"white\",\r\n                  border: \"none\",\r\n                  borderRadius: 3\r\n                }}\r\n              >\r\n                View\r\n              </button>\r\n            </a>\r\n          </div>\r\n        </div>\r\n        <div style={{ flex: 1, paddingTop: \"1em\" }}>\r\n          {`${formatDate(new Date(props.date))} by ${props.channelTitle}` ||\r\n            \"No Date\"}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport IndividualVideoResult from \"./IndividualVideoResult\";\r\n\r\nexport function VideoListings(props) {\r\n  return (\r\n    <div\r\n      className=\"videoListingsContainer\"\r\n      style={{\r\n        margin: \"1em\"\r\n      }}\r\n    >\r\n      {props.videoList.length > 0 ? (\r\n        props.videoList.map((res, i) => (\r\n          <IndividualVideoResult\r\n            key={i}\r\n            kind={res.id.kind}\r\n            title={res.snippet.title || false}\r\n            description={res.snippet.description || false}\r\n            image={res.snippet.thumbnails.high.url || false}\r\n            linkId={res.id.channelId || res.id.videoId}\r\n            date={res.snippet.publishedAt || false}\r\n            channelTitle={res.snippet.channelTitle || false}\r\n          />\r\n        ))\r\n      ) : (\r\n        <div style={{ padding: \"1em\" }}>No results.</div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { SearchBar } from \"./components/SearchBar/SearchBar\";\nimport { ResultsAndPagintation } from \"./components/ResultsAndPagination/ResultsAndPagination\";\nimport { VideoListings } from \"./components/VideoListings/VideoListings\";\n\n/**\n * App.js serves as the parent component for this application.\n *\n * Shared state is declared here (13-16)\n * This state is used to render a\n * - Loading indicator (35)\n * - Error message regarding a failed response from the YouTube API (36-40)\n * - List of video results (41-48)\n *\n * firstSearch prevents the render of ResultsAndPagination and VideoListings\n *    until the receiving the first successful batch of results (22)\n * */\n\nfunction App() {\n  const [videoList, setVideoList] = useState([]);\n  const [firstSearch, setFirstSearch] = useState(true);\n  const [loadingSearchResults, setLoadingResults] = useState(false);\n  const [error, setError] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">ThinkHR/Mammoth Code Test</header>\n      <SearchBar\n        setVideoList={setVideoList}\n        setFirstSearch={setFirstSearch}\n        setLoadingResults={setLoadingResults}\n        setError={setError}\n      />\n      {loadingSearchResults ? <div>Loading...</div> : null}\n      {error ? (\n        <div style={{ color: \"red\" }}>\n          There was a problem retreiving your results. Please try again later.\n        </div>\n      ) : null}\n      {!firstSearch && !loadingSearchResults ? (\n        <div>\n          <ResultsAndPagintation results={videoList.length} />\n          <VideoListings videoList={videoList} />\n        </div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}